name: CI

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

# Cancel previous runs on the same branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Setup job that installs dependencies once and caches them
  setup:
    name: Setup Dependencies
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
      node-modules-cached: ${{ steps.cache-node-modules.outputs.cache-hit }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "pnpm"

      - name: Generate cache key
        id: cache-key
        run: echo "key=node-modules-${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}" >> $GITHUB_OUTPUT

      - name: Cache node_modules
        uses: actions/cache@v4
        id: cache-node-modules
        with:
          path: node_modules
          key: ${{ steps.cache-key.outputs.key }}
          restore-keys: |
            node-modules-${{ runner.os }}-

      - name: Install dependencies
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: |
          echo "Installing dependencies with pnpm..."
          pnpm install --frozen-lockfile --reporter=silent
          echo "Dependencies installed successfully"

      - name: Verify installation
        run: |
          echo "Verifying Node.js and pnpm versions..."
          node --version
          pnpm --version
          echo "Checking if node_modules exists..."
          ls -la node_modules > /dev/null && echo "node_modules directory exists" || echo "node_modules directory missing"

  # Lint job with improved error handling
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    needs: setup
    timeout-minutes: 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"

      - name: Restore node_modules cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ needs.setup.outputs.cache-key }}
          restore-keys: |
            node-modules-${{ runner.os }}-
        continue-on-error: false

      - name: Verify dependencies
        run: |
          if [ ! -d "node_modules" ]; then
            echo "node_modules not found, installing dependencies..."
            pnpm install --frozen-lockfile
          else
            echo "node_modules found, verifying key packages..."
            pnpm list @biomejs/biome || pnpm install --frozen-lockfile
          fi

      - name: Check Biome availability
        run: |
          echo "Checking if Biome is available..."
          pnpm exec biome --version

      - name: Run linter (with auto-fix)
        run: |
          echo "Running Biome formatter and linter..."
          pnpm run fix || {
            echo "Auto-fix failed, running format separately..."
            pnpm run format && pnpm run fix
          }
        continue-on-error: true

      - name: Final lint check
        run: |
          echo "Running final lint check..."
          pnpm run lint:check

  # Test job with improved reliability
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: setup
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"

      - name: Restore node_modules cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ needs.setup.outputs.cache-key }}
          restore-keys: |
            node-modules-${{ runner.os }}-
        continue-on-error: false

      - name: Verify test dependencies
        run: |
          if [ ! -d "node_modules" ]; then
            echo "node_modules not found, installing dependencies..."
            pnpm install --frozen-lockfile
          else
            echo "node_modules found, verifying test packages..."
            pnpm list vitest || pnpm install --frozen-lockfile
          fi

      - name: Check test setup
        run: |
          echo "Verifying test environment..."
          pnpm exec vitest --version
          echo "Checking test files..."
          find __tests__ -name "*.test.*" | wc -l

      - name: Run tests with coverage
        run: |
          echo "Running tests with coverage..."
          pnpm run test:ci
        env:
          NODE_ENV: test
          CI: true

      - name: Upload coverage reports
        if: success() && github.event_name == 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: coverage/
          retention-days: 7

  # Build job runs after lint and test complete successfully
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [setup, lint, test]
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"

      - name: Restore node_modules cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ needs.setup.outputs.cache-key }}
          restore-keys: |
            node-modules-${{ runner.os }}-

      - name: Verify build dependencies
        run: |
          if [ ! -d "node_modules" ]; then
            echo "node_modules not found, installing dependencies..."
            pnpm install --frozen-lockfile
          else
            echo "node_modules found, verifying Next.js..."
            pnpm list next || pnpm install --frozen-lockfile
          fi

      - name: Build application
        run: |
          echo "Building Next.js application with Turbopack..."
          pnpm run build
        env:
          NODE_ENV: production
          CI: true

      - name: Verify build output
        run: |
          echo "Verifying build output..."
          ls -la .next/ || echo "Build output not found"
          echo "Build completed successfully"
